> // Lists
>
> [1]
Result: [1]

> // Lists
>
> [1] + [2,3]
Result: [1, 2, 3]

> // Lists
>
> [1] + [2,3] + 3
Result: [1, 2, 3, 3]

> // Lists
>
> [1] + [2,3] + 3 + "3"
Result: [1, 2, 3, 3, 3]

> // Lists
>
> def l = [1] + "3" + 0.5
> l.each {println it.class}
class java.lang.Integer
class java.lang.String
class java.math.BigDecimal
Result: [1, 3, 0.5]

> // Lists
>
> List<Integer> l = [1] + "3" + 0.5
> l.each {println it.class}
class java.lang.Integer
class java.lang.String
class java.math.BigDecimal
Result: [1, 3, 0.5]

> // Lists - map() => collect
>
> def l = [1] + "3" + 0.5
> l.collect {it.class}
Result: [class java.lang.Integer, class java.lang.String, class java.math.BigDecimal]

> // Maps
>
> [a: "b"]
Result: [a:b]

> // Maps
>
> ["a": "b"]
Result: [a:b]

> // Maps
>
> def a = "key"
> ["$a": "b"]
Result: [key:b]

> // Maps
>
> def a = "key"
> [a: "b"]
Result: [a:b]

> // Maps
>
> def a = "key"
> [a: "b"].each {k,v -> println( "$k=$v" )}
a=b
Result: [a:b]

> // Maps
> [a:"b"] + [c: "d"]
Result: [a:b, c:d]

>  // Maps
>
> def a = [a:"b"]
> a + [c: "d"]
> a
Result: [a:b]

>  // Maps
>
> def a = [a:"b"]
> a + [a: "d"]
Result: [a:d]

>  // Maps
>
> def a = [a:"b"]
> a + [a: "d"]
> a
Result: [a:b]


> // Ranges
>
> (1 .. 4).each {println (it)}
1
2
3
4
Result: [1, 2, 3, 4]

> // Collection Ops
>
> ["Ab", "Ac", "BC"].find { it.charAt(0) == "A"}
Result: Ab

> // Collection Ops
>
> ["Ab", "Ac", "BC"].findAll { it.charAt(0) == "A"}
Result: [Ab, Ac]

> // Collection Ops
>
> ["Ab", "Ac", "BC"].permutations()
Result: [[Ab, BC, Ac], [Ac, Ab, BC], [Ac, BC, Ab], [BC, Ab, Ac], [Ab, Ac, BC], [BC, Ac, Ab]]